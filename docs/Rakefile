require 'shellwords'
require 'yaml'
require 'open-uri'
require 'rake'

class Site
  include Rake::DSL

  def initialize(options)
    %w{repo clone subdir subsite branch}.each{|var|
      self.instance_variable_set("@#{var}".to_sym, options[var.to_sym])
    }

    raise "No repo" unless @repo
    raise "No clone" unless @clone

    @branch ||= 'master'
    @dir = @subdir ? File.join(@clone, @subdir) : @clone
    @subsite = @subsite ? '/' + @subsite + '/' : ''
    @redirects = File.file?('redir.yml') ? YAML::load_file('redir.yml') : {}
  end

  def remove(file, extensions)
    extensions.collect{|ext| file + '.' + ext}.each{|tgt|
      sh "cd #{@dir.shellescape} && git rm --ignore-unmatch -f #{tgt.shellescape}"
      File.unlink(File.join(@dir, tgt)) if File.file?(File.join(@dir, tgt))
    }
  end

  def cleanup_redirects
    @redirects.each_pair{|from, to|
      raise "Redir: #{from}.md does not exist" unless File.file?("#{from}.md")
      to.each{|tgt|
        remove(tgt, %w{html md})
      }
    }
  end

  def copy(src)
    if src == 'Home.md'
      target = File.join(@dir, 'index.md')
      title = nil
    else
      target = File.join(@dir, src)
      title = File.basename(src, File.extname(src)).gsub('-', ' ')
    end

    open(target, 'w'){|tgt|
      header = {
        'title' => title || 'Better BibTeX',
        'redirect_from' => (@redirects[File.basename(src, File.extname(src))] || []).collect{|to| "#{@subsite}#{to}.html"}
      }
      case header['redirect_from'].length
      when 0 then header.delete('redirect_from')
      when 1 then header['redirect_from'] = header['redirect_from'].first
      end
      tgt.puts(header.to_yaml + "---")
      tgt.puts('# ' + title + "\n\n") if title
      md = open(src).read
      md.gsub!(/\[\[(.*?)\]\]/){|match|
        link = $1
        if link =~ /\|/
          label, link = link.split('|', 2)
        else
          label = link
        end

        "[#{label}](#{link.gsub(' ', '-')})"
      }

      md += "\n\n" + """
        <script type = 'text/javascript'>
          var redir = 'https://github.com/retorquere/zotero-better-bibtex/wiki/#{File.basename(src, File.extname(src))}';
          if (m = document.referrer.match(/libguides\\.mit\\.edu\\/c\\.php\\?(.+)/)) {
            var q = m[1].replace(/#.*/, '').split('&').sort().join('&');
            if (q == 'g=176000&p=1159208') {
              redir = 'https://retorquere.github.io/mit.html';
            }
          }

          window.setTimeout(function(){ window.location.href = redir; },3000)
        </script>
      """.strip

      tgt.write(md)
    }
  end

  def publish
    sh "git clone #{@repo.shellescape} #{@clone.shellescape}" unless File.directory?(@clone)
    sh "cd #{@clone.shellescape} && git pull"
    sh "cd #{@clone.shellescape} && git checkout #{@branch.shellescape}"

    cleanup_redirects
    remove('index', %w{html})

    Dir['*.md'].reject{|md| md =~ /^_/}.each{|src| copy(src) }

    open(File.join(@dir, 'update.rdf'), 'w'){|update| update.write(open('https://github.com/retorquere/zotero-better-bibtex/releases/download/update.rdf/update.rdf').read) }

    sh "cd #{@dir.shellescape} && git add *"
    sh "cd #{@clone.shellescape} && git commit -m 'Site update' || true"
    sh "cd #{@clone.shellescape} && git push"
  end
end

task :publish do
  sh "git pull"
  sh "git add *.md"
  sh "git commit -m updates || true"
  sh "git push || true"
  Site.new(
    repo: 'git@github.com:retorquere/zotero-better-bibtex.git',
    clone: 'bbt',
    branch: 'gh-pages',
    #subsite: 'zotero-better-bibtex'
  ).publish
  Site.new(
    repo: 'git@github.com:ZotPlus/ZotPlus.github.io.git',
    clone: 'zotplus',
    subdir: 'better-bibtex',
    subsite: 'better-bibtex'
  ).publish
  Site.new(
    repo: 'git@github.com:ZotPlus/ZotPlus.github.io.git',
    clone: 'zotplus',
    subdir: 'zotero-better-bibtex',
    subsite: 'zotero-better-bibtex'
  ).publish
end

task :links do
  Dir['*.md'].each{|md|
    body = open(md).read
    body.gsub(/\[\[(.*?)\]\]/){|match|
      link = $1.split('|', 2)[-1].gsub(' ', '-').sub(/#.*/, '') + '.md'
      puts "#{md} links to non-existent #{link}" unless link =~ /^http/ || File.file?(link)
    }
    body.gsub(/\[(.*?)\]\((.*?)\)/){|match|
      link = $2
      puts "#{md} links to non-existent #{link}" unless link =~ /^http/ || File.file?(link)
      puts "#{md} has absolute link to #{link}" if link.start_with?('https://github.com/retorquere/zotero-better-bibtex/wiki')
    }
  }
end
