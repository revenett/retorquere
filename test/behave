#!/usr/bin/env python3

import sys
import os
import json
import subprocess
import uuid

import pathlib
for d in pathlib.Path(__file__).resolve().parents:
  if os.path.exists(os.path.join(d, 'behave.ini')):
    ROOT = d
    break
os.chdir(ROOT)

# because behave doesn't think it's useful to be able to load local stuff... oy...
sys.path.insert(0, os.path.abspath('test/features/steps'))

# build before test unless on CI
if not 'CI' in os.environ:
  process = subprocess.Popen(['npm', 'run', 'build'], stdout=subprocess.PIPE)
  while True:
    line = process.stdout.readline()
    print(line.decode('utf-8'), end='')
    if process.poll() is not None: break
  returncode = process.poll()
  if returncode != 0:
    print(f'Build exited with exit code {returncode}')
    sys.exit(returncode)

# augment command line
## stop on first error by default
if not 'CI' in os.environ or '--no-stop' in sys.argv:
  sys.argv = [arg for arg in sys.argv if arg != '--no-stop']
else:
  sys.argv.append('--stop')

## exclude @nightly by default
if os.environ.get('TRAVIS_EVENT_TYPE', '') == 'cron' or '#nightly' in os.environ.get('TRAVIS_COMMIT_MESSAGE', '') or '--nightly' in sys.argv:
  sys.argv = [arg for arg in sys.argv if arg != '--nightly']
else:
  sys.argv.extend(['--tags', '~@nightly'])

## client is Zotero unless specified
sys.argv.extend(['--define', f'zotero=' + os.environ.get('ZOTERO', 'zotero')])
sys.argv.extend(['--define', f'debugbridgepassword={str(uuid.uuid4())}'])

print(' '.join(sys.argv))

#https://stackoverflow.com/questions/28829350/run-python-behave-from-python-instead-of-command-line
from behave.__main__ import Configuration, run_behave
import behave.configuration
sys.exit(run_behave(Configuration(None)))
