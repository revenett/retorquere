#!/usr/bin/env python3

from urllib.request import urlretrieve
import argparse
import json
import os
import re
import shutil
import subprocess
import sys
import tarfile
from pygit2 import Repository

import pathlib
for d in pathlib.Path(__file__).resolve().parents:
  if os.path.exists(os.path.join(d, 'behave.ini')):
    ROOT = d
    break
os.chdir(ROOT)

# because behave doesn't think it's useful to be able to load local stuff... oy...
sys.path.insert(0, os.path.abspath('test/features/steps'))

parser = argparse.ArgumentParser()
parser.add_argument('--no-stop', action='store_true')
parser.add_argument('--nightly', action='store_true')
parser.add_argument('--jurism', action='store_true')
parser.add_argument('--beta', action='store_true')
parser.add_argument('--keep', action='store_true')
parser.add_argument('--no-workers', action='store_true')
parser.add_argument('--this', action='store_true')

args, unknownargs = parser.parse_known_args()
sys.argv = sys.argv[:1] + unknownargs

if args.keep: sys.argv.extend(['--define', 'kill=false'])
if args.no_workers:
  sys.argv.extend(['--define', 'workers=false'])
else:
  sys.argv.extend(['--define', 'workers=true'])

if args.this:
  repo = Repository('.')
  branch = repo.head.name.split('/')[-1]
  assert re.match(r'^gh-[0-9]+$', branch)
  sys.argv.extend(['--tags', branch.replace('gh-', '@') ])
  args.nightly = True

## exclude @nightly by default
if os.path.exists(os.path.join(ROOT, '.nightly.json')):
  with open(os.path.join(ROOT, '.nightly.json')) as f:
    args.nightly = args.nightly or os.environ.get('TRAVIS_BRANCH') in json.load(f)
args.nightly = any([
  args.nightly,                                               # requested explicitly from the command line
  '#nightly' in os.environ.get('TRAVIS_COMMIT_MESSAGE', ''),  # requested explicitly through the commit message
  os.environ.get('TRAVIS_TAG', '') != '',                     # running a release build
  os.environ.get('TRAVIS_EVENT_TYPE') == 'cron',              # running the nightly build
])
if not nightly: sys.argv.extend(['--tags', '~@nightly'])

args.jurism = args.jurism or (os.environ.get('CLIENT') == 'jurism')
if args.jurism:
  sys.argv.extend(['--define', f'client=jurism'])
else:
  sys.argv.extend(['--define', f'client=zotero'])

if 'CI' in os.environ: # set up for CI
  oddjob = (os.environ['JOB'] == '2')

  if args.nightly and os.environ.get('TRAVIS_TAG', '') == '': # don't run beta on tagged builds
    args.beta = oddjob

  else: # run regular tests
    sys.argv.extend(['--tags', f'{"~" if oddjob else ""}@test-cluster-1'])

else: # local client run
  ## stop on first error by default
  if not args.no_stop: sys.argv.append('--stop')

  # build before test unless on CI
  process = subprocess.Popen(['npm', 'run', 'build'], stdout=subprocess.PIPE)
  while True:
    line = process.stdout.readline()
    print(line.decode('utf-8'), end='')
    if process.poll() is not None: break
  returncode = process.poll()
  if returncode != 0:
    print(f'Build exited with exit code {returncode}')
    sys.exit(returncode)

if args.jurism or args.beta:
  if args.jurism:
    client = 'juris-m'
  else:
    client = 'zotero'
  if args.beta:
    beta = ' BETA'
  else:
    beta = ''
  print(f'********* SKIPPING{beta.upper()} BUILD FOR {client.upper()} UNTIL FURTHER NOTICE ****************')
  sys.exit()

if args.beta: sys.argv.extend(['--define', f'beta=true'])
print(' '.join(sys.argv), args)

#https://stackoverflow.com/questions/28829350/run-python-behave-from-python-instead-of-command-line
from behave.__main__ import Configuration, run_behave
sys.exit(run_behave(Configuration(None)))
